package com.staxter.message;

import java.util.Map;
import java.util.Queue;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.logging.Logger;

import com.staxter.player.Player;

/**
 * This class implements the defined operations for messenger service
 * 
 * @author cresende
 */
public class MessengerServiceImpl implements Runnable, MessengerService
{
    /**
     * Logger for MessengerServiceImpl
     */
    private final static Logger LOG = Logger.getLogger(MessengerServiceImpl.class.getName());

    /**
     * This map stores the player by the registered id
     */
    private Map<UUID, Player> registered = new ConcurrentHashMap<UUID, Player>();

    /**
     * This Queue stores the message to be processed
     */
    private Queue<Message> channel = new ConcurrentLinkedQueue<>();


    /**
     * {@inheritDoc}
     * <p>
     * Register the Player and returns the uuid generated by the method
     */
    @Override
    public UUID register(Player player)
    {
        UUID connectionId = null;
        // make sure that UUID will never be duplicated
        do
        {
            connectionId = UUID.randomUUID();
        } while (registered.containsKey(connectionId));

        registered.put(connectionId, player);
        LOG.info(
                String.format(
                        "The player [%s] connected to the chat with connectionId [%s]",
                        player.getName(),
                        connectionId));
        return connectionId;
    }

    /**
     * {@inheritDoc}
     */
    public void sendMessage(Message message)
    {
        channel.add(message);
    }

    /**
     * {@inheritDoc}
     */
    public void run()
    {
        while (true)
        {
            Message message = channel.poll();
            if (message != null)
            {
                Player to = registered.get(message.getPlayerToId());
                if (to != null)
                {
                    to.onMessage(message.getMessage());
                }
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public void joinPlayersToConversation(Player playerOne, Player playerTwo)
    {
        LOG.info(
                String.format(
                        "The player [%s] wants to connect to player [%s]",
                        playerOne.getName(),
                        playerTwo.getName()));

        playerOne.connectTo(playerTwo);
        playerTwo.connectTo(playerOne);

        LOG.info(
                String.format(
                        "The player [%s] is connected to player [%s]",
                        playerOne.getName(),
                        playerTwo.getName()));
    }

    /**
     * {@inheritDoc}
     * <p>
     * Starts the thread which will start the message processing
     */
    public void start()
    {
        new Thread(this).start();
    }

}
